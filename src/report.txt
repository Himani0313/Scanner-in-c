----------Line 1
#include <stdio.h>	<PREPROCESSOR>

----------Line 2
#include <stdlib.h>	<PREPROCESSOR>

----------Line 3
#include <ctype.h>	<PREPROCESSOR>

----------Line 4
#include <string.h>	<PREPROCESSOR>

----------Line 5

----------Line 6
#define BACKWARD_SLASH '\\'	<PREPROCESSOR>

----------Line 7
#define FORWARD_SLASH '/'	<PREPROCESSOR>

----------Line 8
#define DOUBLE_QUOTE '"'	<PREPROCESSOR>

----------Line 9
#define SINGLE_QUOTE '\''	<PREPROCESSOR>

----------Line 10
#define NEW_LINE '\n'	<PREPROCESSOR>

----------Line 11
#define HASH '#'	<PREPROCESSOR>

----------Line 12
#define ASTERISK '*'	<PREPROCESSOR>

----------Line 13

----------Line 14
char	<KEYWORD>
*arithmeticOperators	<IDENTIFIER>
[	<DELIMITER>
]	<DELIMITER>
=	<ARITHMETIC_OPERATOR>
{	<DELIMITER>
"	<DELIMITER>
++	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
--	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
+=	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
-=	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
*=	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
/=	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
%=	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
=	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
+	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
-	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
*	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
/	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
%	<STRING>
"	<DELIMITER>
}	<DELIMITER>
;	<DELIMITER>

----------Line 15

----------Line 16
char	<KEYWORD>
*relationalOperators	<IDENTIFIER>
[	<DELIMITER>
]	<DELIMITER>
=	<ARITHMETIC_OPERATOR>
{	<DELIMITER>
"	<DELIMITER>
==	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
!=	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
>=	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
<=	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
>	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
<	<STRING>
"	<DELIMITER>
}	<DELIMITER>
;	<DELIMITER>

----------Line 17

----------Line 18
char	<KEYWORD>
*logicalOperators	<IDENTIFIER>
[	<DELIMITER>
]	<DELIMITER>
=	<ARITHMETIC_OPERATOR>
{	<DELIMITER>
"	<DELIMITER>
!	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
&&	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
||	<STRING>
"	<DELIMITER>
}	<DELIMITER>
;	<DELIMITER>

----------Line 19

----------Line 20
char	<KEYWORD>
*memberPointerOperators	<IDENTIFIER>
[	<DELIMITER>
]	<DELIMITER>
=	<ARITHMETIC_OPERATOR>
{	<DELIMITER>
"	<DELIMITER>
*	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
&	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
->	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
.	<STRING>
"	<DELIMITER>
}	<DELIMITER>
;	<DELIMITER>

----------Line 21

----------Line 22
char	<KEYWORD>
*bitwiseOperators	<IDENTIFIER>
[	<DELIMITER>
]	<DELIMITER>
=	<ARITHMETIC_OPERATOR>
{	<DELIMITER>
"	<DELIMITER>
^=	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
<<=	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
>>=	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
^	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
<<	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
>>	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
&=	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
|=	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
~	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
&	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
|	<STRING>
"	<DELIMITER>
}	<DELIMITER>
;	<DELIMITER>

----------Line 23

----------Line 24
char	<KEYWORD>
*keywords	<IDENTIFIER>
[	<DELIMITER>
]	<DELIMITER>
=	<ARITHMETIC_OPERATOR>
{	<DELIMITER>
"	<DELIMITER>
auto	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
break	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
case	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
char	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
const	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
continue	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
default	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
do	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
double	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
else	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
enum	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
extern	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
float	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
for	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
goto	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
if	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
int	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
long	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
register	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
return	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
short	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
signed	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
sizeof	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
static	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
struct	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
switch	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
typedef	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
union	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
unsigned	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
void	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
volatile	<STRING>
"	<DELIMITER>
,	<DELIMITER>
"	<DELIMITER>
while	<STRING>
"	<DELIMITER>
}	<DELIMITER>
;	<DELIMITER>

----------Line 25

----------Line 26
enum	<KEYWORD>
{	<DELIMITER>
FALSE	<IDENTIFIER>
,	<DELIMITER>
TRUE	<IDENTIFIER>
}	<DELIMITER>
;	<DELIMITER>

----------Line 27

----------Line 28
typedef	<KEYWORD>
enum	<KEYWORD>
Type	<IDENTIFIER>
{	<DELIMITER>
INIT	<IDENTIFIER>
,	<DELIMITER>
PREPROCESSOR	<IDENTIFIER>
,	<DELIMITER>
KEYWORD	<IDENTIFIER>
,	<DELIMITER>
IDENTIFIER	<IDENTIFIER>
,	<DELIMITER>
POINTER	<IDENTIFIER>
,	<DELIMITER>
DELIMITER	<IDENTIFIER>
,	<DELIMITER>
ARITHMETIC_OPERATOR	<IDENTIFIER>
,	<DELIMITER>
RELATIONAL_OPERATOR	<IDENTIFIER>
,	<DELIMITER>
LOGICAL_OPERATOR	<IDENTIFIER>
,	<DELIMITER>
MEMBER_POINTER_OPERATOR	<IDENTIFIER>
,	<DELIMITER>
BITWISE_OPERATOR	<IDENTIFIER>
,	<DELIMITER>
STRING	<IDENTIFIER>
,	<DELIMITER>
NUMBER	<IDENTIFIER>
,	<DELIMITER>
CHARACTER	<IDENTIFIER>
,	<DELIMITER>
SINGLE_LINE_COMMENT	<IDENTIFIER>
,	<DELIMITER>
MULTI_LINE_COMMENT	<IDENTIFIER>
,	<DELIMITER>
WHITE_SPACE	<IDENTIFIER>
}	<DELIMITER>
Type	<IDENTIFIER>
;	<DELIMITER>

----------Line 29

----------Line 30
char	<KEYWORD>
*getTypeName	<IDENTIFIER>
(	<DELIMITER>
Type	<IDENTIFIER>
type	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 31
switch	<KEYWORD>
(	<DELIMITER>
type	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 32
case	<KEYWORD>
INIT	<IDENTIFIER>
:	<DELIMITER>
return	<KEYWORD>
"	<DELIMITER>
INIT	<STRING>
"	<DELIMITER>
;	<DELIMITER>

----------Line 33
case	<KEYWORD>
PREPROCESSOR	<IDENTIFIER>
:	<DELIMITER>
return	<KEYWORD>
"	<DELIMITER>
PREPROCESSOR	<STRING>
"	<DELIMITER>
;	<DELIMITER>

----------Line 34
case	<KEYWORD>
KEYWORD	<IDENTIFIER>
:	<DELIMITER>
return	<KEYWORD>
"	<DELIMITER>
KEYWORD	<STRING>
"	<DELIMITER>
;	<DELIMITER>

----------Line 35
case	<KEYWORD>
IDENTIFIER	<IDENTIFIER>
:	<DELIMITER>
return	<KEYWORD>
"	<DELIMITER>
IDENTIFIER	<STRING>
"	<DELIMITER>
;	<DELIMITER>

----------Line 36
case	<KEYWORD>
POINTER	<IDENTIFIER>
:	<DELIMITER>
return	<KEYWORD>
"	<DELIMITER>
POINTER	<STRING>
"	<DELIMITER>
;	<DELIMITER>

----------Line 37
case	<KEYWORD>
DELIMITER	<IDENTIFIER>
:	<DELIMITER>
return	<KEYWORD>
"	<DELIMITER>
DELIMITER	<STRING>
"	<DELIMITER>
;	<DELIMITER>

----------Line 38
case	<KEYWORD>
ARITHMETIC_OPERATOR	<IDENTIFIER>
:	<DELIMITER>
return	<KEYWORD>
"	<DELIMITER>
ARITHMETIC_OPERATOR	<STRING>
"	<DELIMITER>
;	<DELIMITER>

----------Line 39
case	<KEYWORD>
RELATIONAL_OPERATOR	<IDENTIFIER>
:	<DELIMITER>
return	<KEYWORD>
"	<DELIMITER>
RELATIONAL_OPERATOR	<STRING>
"	<DELIMITER>
;	<DELIMITER>

----------Line 40
case	<KEYWORD>
LOGICAL_OPERATOR	<IDENTIFIER>
:	<DELIMITER>
return	<KEYWORD>
"	<DELIMITER>
LOGICAL_OPERATOR	<STRING>
"	<DELIMITER>
;	<DELIMITER>

----------Line 41
case	<KEYWORD>
MEMBER_POINTER_OPERATOR	<IDENTIFIER>
:	<DELIMITER>
return	<KEYWORD>
"	<DELIMITER>
MEMBER_POINTER_OPERATOR	<STRING>
"	<DELIMITER>
;	<DELIMITER>

----------Line 42
case	<KEYWORD>
BITWISE_OPERATOR	<IDENTIFIER>
:	<DELIMITER>
return	<KEYWORD>
"	<DELIMITER>
BITWISE_OPERATOR	<STRING>
"	<DELIMITER>
;	<DELIMITER>

----------Line 43
case	<KEYWORD>
STRING	<IDENTIFIER>
:	<DELIMITER>
return	<KEYWORD>
"	<DELIMITER>
STRING	<STRING>
"	<DELIMITER>
;	<DELIMITER>

----------Line 44
case	<KEYWORD>
NUMBER	<IDENTIFIER>
:	<DELIMITER>
return	<KEYWORD>
"	<DELIMITER>
NUMBER	<STRING>
"	<DELIMITER>
;	<DELIMITER>

----------Line 45
case	<KEYWORD>
CHARACTER	<IDENTIFIER>
:	<DELIMITER>
return	<KEYWORD>
"	<DELIMITER>
CHARACTER	<STRING>
"	<DELIMITER>
;	<DELIMITER>

----------Line 46
case	<KEYWORD>
SINGLE_LINE_COMMENT	<IDENTIFIER>
:	<DELIMITER>
return	<KEYWORD>
"	<DELIMITER>
SINGLE_LINE_COMMENT	<STRING>
"	<DELIMITER>
;	<DELIMITER>

----------Line 47
case	<KEYWORD>
MULTI_LINE_COMMENT	<IDENTIFIER>
:	<DELIMITER>
return	<KEYWORD>
"	<DELIMITER>
MULTI_LINE_COMMENT	<STRING>
"	<DELIMITER>
;	<DELIMITER>

----------Line 48
case	<KEYWORD>
WHITE_SPACE	<IDENTIFIER>
:	<DELIMITER>
return	<KEYWORD>
"	<DELIMITER>
WHITE_SPACE	<STRING>
"	<DELIMITER>
;	<DELIMITER>

----------Line 49
}	<DELIMITER>

----------Line 50
}	<DELIMITER>

----------Line 51

----------Line 52
typedef	<KEYWORD>
struct	<KEYWORD>
Scanner	<IDENTIFIER>
{	<DELIMITER>

----------Line 53
FILE	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
sfile	<IDENTIFIER>
;	<DELIMITER>

----------Line 54
FILE	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
dfile	<IDENTIFIER>
;	<DELIMITER>

----------Line 55

----------Line 56
char	<KEYWORD>
previous	<IDENTIFIER>
;	<DELIMITER>

----------Line 57
char	<KEYWORD>
current	<IDENTIFIER>
;	<DELIMITER>

----------Line 58
char	<KEYWORD>
next	<IDENTIFIER>
;	<DELIMITER>

----------Line 59

----------Line 60
int	<KEYWORD>
line	<IDENTIFIER>
;	<DELIMITER>

----------Line 61
int	<KEYWORD>
characters	<IDENTIFIER>
;	<DELIMITER>

----------Line 62

----------Line 63
Type	<IDENTIFIER>
previousType	<IDENTIFIER>
;	<DELIMITER>

----------Line 64
}	<DELIMITER>
Scanner	<IDENTIFIER>
;	<DELIMITER>

----------Line 65

----------Line 66
void	<KEYWORD>
checkFile	<IDENTIFIER>
(	<DELIMITER>
FILE	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
file	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 67
if	<KEYWORD>
(	<DELIMITER>
file	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
NULL	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 68
perror	<IDENTIFIER>
(	<DELIMITER>
"	<DELIMITER>
ERROR OPENING FILE	<STRING>
"	<DELIMITER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 69
exit	<IDENTIFIER>
(	<DELIMITER>
1	<NUMBER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 70
}	<DELIMITER>

----------Line 71
}	<DELIMITER>

----------Line 72

----------Line 73
FILE	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
openFile	<IDENTIFIER>
(	<DELIMITER>
const	<KEYWORD>
char	<KEYWORD>
*name	<IDENTIFIER>
,	<DELIMITER>
const	<KEYWORD>
char	<KEYWORD>
*mode	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 74
FILE	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
file	<IDENTIFIER>
;	<DELIMITER>

----------Line 75
file	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
fopen	<IDENTIFIER>
(	<DELIMITER>
name	<IDENTIFIER>
,	<DELIMITER>
mode	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 76
checkFile	<IDENTIFIER>
(	<DELIMITER>
file	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 77
return	<KEYWORD>
file	<IDENTIFIER>
;	<DELIMITER>

----------Line 78
}	<DELIMITER>

----------Line 79

----------Line 80
void	<KEYWORD>
closeFile	<IDENTIFIER>
(	<DELIMITER>
FILE	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
file	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 81
if	<KEYWORD>
(	<DELIMITER>
fclose	<IDENTIFIER>
(	<DELIMITER>
file	<IDENTIFIER>
)	<DELIMITER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
EOF	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 82
perror	<IDENTIFIER>
(	<DELIMITER>
"	<DELIMITER>
ERROR CLOSING FILE	<STRING>
"	<DELIMITER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 83
exit	<IDENTIFIER>
(	<DELIMITER>
1	<NUMBER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 84
}	<DELIMITER>

----------Line 85
}	<DELIMITER>

----------Line 86

----------Line 87
void	<KEYWORD>
initScanner	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
,	<DELIMITER>
char	<KEYWORD>
*sourceFileLocation	<IDENTIFIER>
,	<DELIMITER>
char	<KEYWORD>
*destinationFileLocation	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 88
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
sfile	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
openFile	<IDENTIFIER>
(	<DELIMITER>
sourceFileLocation	<IDENTIFIER>
,	<DELIMITER>
"	<DELIMITER>
r	<STRING>
"	<DELIMITER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 89
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
dfile	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
openFile	<IDENTIFIER>
(	<DELIMITER>
destinationFileLocation	<IDENTIFIER>
,	<DELIMITER>
"	<DELIMITER>
w	<STRING>
"	<DELIMITER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 90

----------Line 91
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
previous	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
EOF	<IDENTIFIER>
;	<DELIMITER>

----------Line 92
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
EOF	<IDENTIFIER>
;	<DELIMITER>

----------Line 93
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
next	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
EOF	<IDENTIFIER>
;	<DELIMITER>

----------Line 94

----------Line 95
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
line	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
1	<NUMBER>
;	<DELIMITER>

----------Line 96
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
characters	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
0	<NUMBER>
;	<DELIMITER>

----------Line 97

----------Line 98
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
previousType	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
INIT	<IDENTIFIER>
;	<DELIMITER>

----------Line 99
}	<DELIMITER>

----------Line 100

----------Line 101
void	<KEYWORD>
closeScanner	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 102
closeFile	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
sfile	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 103
closeFile	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
dfile	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 104
}	<DELIMITER>

----------Line 105

----------Line 106
int	<KEYWORD>
getChar	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 107
int	<KEYWORD>
temp	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
fgetc	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
sfile	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 108

----------Line 109
if	<KEYWORD>
(	<DELIMITER>
temp	<IDENTIFIER>
!=	<RELATIONAL_OPERATOR>
EOF	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 110
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
characters	<IDENTIFIER>
++	<ARITHMETIC_OPERATOR>
;	<DELIMITER>

----------Line 111
}	<DELIMITER>

----------Line 112

----------Line 113
return	<KEYWORD>
temp	<IDENTIFIER>
;	<DELIMITER>

----------Line 114
}	<DELIMITER>

----------Line 115

----------Line 116
void	<KEYWORD>
restoreChar	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
,	<DELIMITER>
char	<KEYWORD>
backupChar	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 117
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
characters	<IDENTIFIER>
--	<ARITHMETIC_OPERATOR>
;	<DELIMITER>

----------Line 118

----------Line 119
ungetc	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
next	<IDENTIFIER>
,	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
sfile	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 120

----------Line 121
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
next	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
;	<DELIMITER>

----------Line 122
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
previous	<IDENTIFIER>
;	<DELIMITER>

----------Line 123
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
previous	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
backupChar	<IDENTIFIER>
;	<DELIMITER>

----------Line 124
}	<DELIMITER>

----------Line 125

----------Line 126
int	<KEYWORD>
readAndSetCurrentChar	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 127
return	<KEYWORD>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
getChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 128
}	<DELIMITER>

----------Line 129

----------Line 130
int	<KEYWORD>
readAndSetNextChar	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 131
return	<KEYWORD>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
next	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
getChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 132
}	<DELIMITER>

----------Line 133

----------Line 134
int	<KEYWORD>
isCurrentEOF	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 135
return	<KEYWORD>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
EOF	<IDENTIFIER>
;	<DELIMITER>

----------Line 136
}	<DELIMITER>

----------Line 137

----------Line 138
void	<KEYWORD>
swapChars	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 139
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
previous	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
;	<DELIMITER>

----------Line 140
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
next	<IDENTIFIER>
;	<DELIMITER>

----------Line 141
}	<DELIMITER>

----------Line 142

----------Line 143
void	<KEYWORD>
reportPreviousType	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 144
fprintf	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
dfile	<IDENTIFIER>
,	<DELIMITER>
"	<DELIMITER>
\t<%s>\n	<STRING>
"	<DELIMITER>
,	<DELIMITER>
getTypeName	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
previousType	<IDENTIFIER>
)	<DELIMITER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 145
}	<DELIMITER>

----------Line 146

----------Line 147
void	<KEYWORD>
setAndReportPreviousType	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
,	<DELIMITER>
Type	<IDENTIFIER>
type	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 148
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
previousType	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
type	<IDENTIFIER>
;	<DELIMITER>

----------Line 149
reportPreviousType	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 150
}	<DELIMITER>

----------Line 151

----------Line 152
int	<KEYWORD>
isSingleLineComment	<IDENTIFIER>
(	<DELIMITER>
char	<KEYWORD>
current	<IDENTIFIER>
,	<DELIMITER>
char	<KEYWORD>
next	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 153
return	<KEYWORD>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
FORWARD_SLASH	<IDENTIFIER>
&	<MEMBER_POINTER_OPERATOR>
&next	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
FORWARD_SLASH	<IDENTIFIER>
;	<DELIMITER>

----------Line 154
}	<DELIMITER>

----------Line 155

----------Line 156
int	<KEYWORD>
isDoubleQuote	<IDENTIFIER>
(	<DELIMITER>
char	<KEYWORD>
previous	<IDENTIFIER>
,	<DELIMITER>
char	<KEYWORD>
current	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 157
return	<KEYWORD>
previous	<IDENTIFIER>
!=	<RELATIONAL_OPERATOR>
BACKWARD_SLASH	<IDENTIFIER>
&	<MEMBER_POINTER_OPERATOR>
&current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
DOUBLE_QUOTE	<IDENTIFIER>
;	<DELIMITER>

----------Line 158
}	<DELIMITER>

----------Line 159

----------Line 160
int	<KEYWORD>
isSingleQuote	<IDENTIFIER>
(	<DELIMITER>
char	<KEYWORD>
previous	<IDENTIFIER>
,	<DELIMITER>
char	<KEYWORD>
current	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 161
return	<KEYWORD>
previous	<IDENTIFIER>
!=	<RELATIONAL_OPERATOR>
BACKWARD_SLASH	<IDENTIFIER>
&	<MEMBER_POINTER_OPERATOR>
&current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
SINGLE_QUOTE	<IDENTIFIER>
;	<DELIMITER>

----------Line 162
}	<DELIMITER>

----------Line 163

----------Line 164
int	<KEYWORD>
isNewLine	<IDENTIFIER>
(	<DELIMITER>
char	<KEYWORD>
current	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 165
return	<KEYWORD>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
NEW_LINE	<IDENTIFIER>
;	<DELIMITER>

----------Line 166
}	<DELIMITER>

----------Line 167

----------Line 168
int	<KEYWORD>
isMultiLineComment	<IDENTIFIER>
(	<DELIMITER>
char	<KEYWORD>
current	<IDENTIFIER>
,	<DELIMITER>
char	<KEYWORD>
next	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 169
return	<KEYWORD>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
FORWARD_SLASH	<IDENTIFIER>
&	<MEMBER_POINTER_OPERATOR>
&next	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
ASTERISK	<IDENTIFIER>
;	<DELIMITER>

----------Line 170
}	<DELIMITER>

----------Line 171

----------Line 172
int	<KEYWORD>
isHash	<IDENTIFIER>
(	<DELIMITER>
char	<KEYWORD>
current	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 173
return	<KEYWORD>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
'	<DELIMITER>
#	<CHARACTER>
'	<DELIMITER>
;	<DELIMITER>

----------Line 174
}	<DELIMITER>

----------Line 175

----------Line 176
int	<KEYWORD>
isDelimiter	<IDENTIFIER>
(	<DELIMITER>
char	<KEYWORD>
current	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 177
return	<KEYWORD>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
'	<DELIMITER>
,	<CHARACTER>
'	<DELIMITER>
||	<LOGICAL_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
'	<DELIMITER>
.	<CHARACTER>
'	<DELIMITER>
||	<LOGICAL_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
'	<DELIMITER>
:	<CHARACTER>
'	<DELIMITER>
||	<LOGICAL_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
'	<DELIMITER>
;	<CHARACTER>
'	<DELIMITER>
||	<LOGICAL_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
'	<DELIMITER>
?	<CHARACTER>
'	<DELIMITER>
||	<LOGICAL_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
'	<DELIMITER>
(	<CHARACTER>
'	<DELIMITER>
||	<LOGICAL_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
'	<DELIMITER>
)	<CHARACTER>
'	<DELIMITER>
||	<LOGICAL_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
'	<DELIMITER>
{	<CHARACTER>
'	<DELIMITER>
||	<LOGICAL_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
'	<DELIMITER>
}	<CHARACTER>
'	<DELIMITER>
||	<LOGICAL_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
'	<DELIMITER>
[	<CHARACTER>
'	<DELIMITER>
||	<LOGICAL_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
'	<DELIMITER>
]	<CHARACTER>
'	<DELIMITER>
;	<DELIMITER>

----------Line 178
}	<DELIMITER>

----------Line 179

----------Line 180
void	<KEYWORD>
reportNewLine	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 181
fprintf	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
dfile	<IDENTIFIER>
,	<DELIMITER>
"	<DELIMITER>
\n	<STRING>
"	<DELIMITER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 182
}	<DELIMITER>

----------Line 183

----------Line 184
void	<KEYWORD>
startNewLine	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 185
fprintf	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
dfile	<IDENTIFIER>
,	<DELIMITER>
"	<DELIMITER>
----------Line %d	<STRING>
"	<DELIMITER>
,	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
line	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 186
reportNewLine	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 187
}	<DELIMITER>

----------Line 188

----------Line 189
void	<KEYWORD>
incrementAndReportNewLine	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 190
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
line	<IDENTIFIER>
++	<ARITHMETIC_OPERATOR>
;	<DELIMITER>

----------Line 191
reportNewLine	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 192
startNewLine	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 193
}	<DELIMITER>

----------Line 194

----------Line 195
void	<KEYWORD>
reportChar	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
,	<DELIMITER>
char	<KEYWORD>
c	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 196
fprintf	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
dfile	<IDENTIFIER>
,	<DELIMITER>
"	<DELIMITER>
%c	<STRING>
"	<DELIMITER>
,	<DELIMITER>
c	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 197
}	<DELIMITER>

----------Line 198

----------Line 199
void	<KEYWORD>
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 200
reportChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 201
}	<DELIMITER>

----------Line 202

----------Line 203
int	<KEYWORD>
isCurrentNotEOFOrReadAndSetCurrentChar	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 204
return	<KEYWORD>
!isCurrentEOF	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
||	<LOGICAL_OPERATOR>
readAndSetCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
!	<LOGICAL_OPERATOR>
=	<ARITHMETIC_OPERATOR>
EOF	<IDENTIFIER>
;	<DELIMITER>

----------Line 205
}	<DELIMITER>

----------Line 206

----------Line 207
char	<KEYWORD>
readPreProcessor	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 208
char	<KEYWORD>
backupChar	<IDENTIFIER>
;	<DELIMITER>

----------Line 209

----------Line 210
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 211
do	<KEYWORD>
{	<DELIMITER>

----------Line 212
swapChars	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 213
readAndSetNextChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 214

----------Line 215
if	<KEYWORD>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
NEW_LINE	<IDENTIFIER>
)	<DELIMITER>
break	<KEYWORD>
;	<DELIMITER>

----------Line 216

----------Line 217
backupChar	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
previous	<IDENTIFIER>
;	<DELIMITER>

----------Line 218

----------Line 219
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 220
}	<DELIMITER>
while	<KEYWORD>
(	<DELIMITER>
isCurrentNotEOFOrReadAndSetCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 221

----------Line 222
setAndReportPreviousType	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
PREPROCESSOR	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 223

----------Line 224
return	<KEYWORD>
backupChar	<IDENTIFIER>
;	<DELIMITER>

----------Line 225
}	<DELIMITER>

----------Line 226

----------Line 227
void	<KEYWORD>
stripMultiLineComment	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 228
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 229
do	<KEYWORD>
{	<DELIMITER>

----------Line 230
swapChars	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 231
readAndSetNextChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 232

----------Line 233
if	<KEYWORD>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
NEW_LINE	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 234
incrementAndReportNewLine	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 235
}	<DELIMITER>
else	<KEYWORD>
if	<KEYWORD>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
previous	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
ASTERISK	<IDENTIFIER>
&	<MEMBER_POINTER_OPERATOR>
&scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
FORWARD_SLASH	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 236
break	<KEYWORD>
;	<DELIMITER>

----------Line 237
}	<DELIMITER>

----------Line 238

----------Line 239
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 240
}	<DELIMITER>
while	<KEYWORD>
(	<DELIMITER>
isCurrentNotEOFOrReadAndSetCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 241
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 242
setAndReportPreviousType	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
MULTI_LINE_COMMENT	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 243
}	<DELIMITER>

----------Line 244

----------Line 245
void	<KEYWORD>
stripSingleLineComment	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 246
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 247
do	<KEYWORD>
{	<DELIMITER>

----------Line 248
swapChars	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 249
readAndSetNextChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 250

----------Line 251
if	<KEYWORD>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
NEW_LINE	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 252
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
line	<IDENTIFIER>
++	<ARITHMETIC_OPERATOR>
;	<DELIMITER>

----------Line 253
break	<KEYWORD>
;	<DELIMITER>

----------Line 254
}	<DELIMITER>

----------Line 255

----------Line 256
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 257
}	<DELIMITER>
while	<KEYWORD>
(	<DELIMITER>
isCurrentNotEOFOrReadAndSetCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 258

----------Line 259
setAndReportPreviousType	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
SINGLE_LINE_COMMENT	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 260
}	<DELIMITER>

----------Line 261

----------Line 262
void	<KEYWORD>
readString	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 263
int	<KEYWORD>
backwardSlashCount	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
0	<NUMBER>
;	<DELIMITER>

----------Line 264

----------Line 265
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 266
setAndReportPreviousType	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
DELIMITER	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 267

----------Line 268
do	<KEYWORD>
{	<DELIMITER>

----------Line 269
swapChars	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 270
readAndSetNextChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 271

----------Line 272
if	<KEYWORD>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
previous	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
BACKWARD_SLASH	<IDENTIFIER>
)	<DELIMITER>
backwardSlashCount	<IDENTIFIER>
++	<ARITHMETIC_OPERATOR>
;	<DELIMITER>

----------Line 273
else	<KEYWORD>
backwardSlashCount	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
0	<NUMBER>
;	<DELIMITER>

----------Line 274

----------Line 275
if	<KEYWORD>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
DOUBLE_QUOTE	<IDENTIFIER>
&	<MEMBER_POINTER_OPERATOR>
&(	<DELIMITER>
backwardSlashCount	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
0	<NUMBER>
||	<LOGICAL_OPERATOR>
backwardSlashCount	<IDENTIFIER>
%	<ARITHMETIC_OPERATOR>
2	<NUMBER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
0	<NUMBER>
)	<DELIMITER>
)	<DELIMITER>
break	<KEYWORD>
;	<DELIMITER>

----------Line 276

----------Line 277
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 278
}	<DELIMITER>
while	<KEYWORD>
(	<DELIMITER>
isCurrentNotEOFOrReadAndSetCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 279

----------Line 280
setAndReportPreviousType	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
STRING	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 281

----------Line 282
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 283
setAndReportPreviousType	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
DELIMITER	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 284
}	<DELIMITER>

----------Line 285

----------Line 286
void	<KEYWORD>
readChar	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 287
int	<KEYWORD>
backwardSlashCount	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
0	<NUMBER>
;	<DELIMITER>

----------Line 288

----------Line 289
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 290
setAndReportPreviousType	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
DELIMITER	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 291

----------Line 292
do	<KEYWORD>
{	<DELIMITER>

----------Line 293
swapChars	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 294
readAndSetNextChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 295

----------Line 296
if	<KEYWORD>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
previous	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
BACKWARD_SLASH	<IDENTIFIER>
)	<DELIMITER>
backwardSlashCount	<IDENTIFIER>
++	<ARITHMETIC_OPERATOR>
;	<DELIMITER>

----------Line 297
else	<KEYWORD>
backwardSlashCount	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
0	<NUMBER>
;	<DELIMITER>

----------Line 298

----------Line 299
if	<KEYWORD>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
SINGLE_QUOTE	<IDENTIFIER>
&	<MEMBER_POINTER_OPERATOR>
&(	<DELIMITER>
backwardSlashCount	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
0	<NUMBER>
||	<LOGICAL_OPERATOR>
backwardSlashCount	<IDENTIFIER>
%	<ARITHMETIC_OPERATOR>
2	<NUMBER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
0	<NUMBER>
)	<DELIMITER>
)	<DELIMITER>
break	<KEYWORD>
;	<DELIMITER>

----------Line 300

----------Line 301
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 302
}	<DELIMITER>
while	<KEYWORD>
(	<DELIMITER>
isCurrentNotEOFOrReadAndSetCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 303

----------Line 304
setAndReportPreviousType	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
CHARACTER	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 305

----------Line 306
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 307
setAndReportPreviousType	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
DELIMITER	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 308
}	<DELIMITER>

----------Line 309

----------Line 310
char	<KEYWORD>
readKeywordIdentifier	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 311
char	<KEYWORD>
keyword	<IDENTIFIER>
[	<DELIMITER>
10	<NUMBER>
]	<DELIMITER>
;	<DELIMITER>

----------Line 312
int	<KEYWORD>
index	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
0	<NUMBER>
;	<DELIMITER>

----------Line 313
int	<KEYWORD>
i	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
0	<NUMBER>
;	<DELIMITER>

----------Line 314
int	<KEYWORD>
isKeywork	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
0	<NUMBER>
;	<DELIMITER>

----------Line 315
char	<KEYWORD>
backupChar	<IDENTIFIER>
;	<DELIMITER>

----------Line 316

----------Line 317
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 318
keyword	<IDENTIFIER>
[	<DELIMITER>
index	<IDENTIFIER>
++	<ARITHMETIC_OPERATOR>
]	<DELIMITER>
=	<ARITHMETIC_OPERATOR>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
;	<DELIMITER>

----------Line 319
do	<KEYWORD>
{	<DELIMITER>

----------Line 320
swapChars	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 321
readAndSetNextChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 322

----------Line 323
if	<KEYWORD>
(	<DELIMITER>
isalpha	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
)	<DELIMITER>
&&	<LOGICAL_OPERATOR>
index	<IDENTIFIER>
<=	<RELATIONAL_OPERATOR>
8	<NUMBER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 324
keyword	<IDENTIFIER>
[	<DELIMITER>
index	<IDENTIFIER>
++	<ARITHMETIC_OPERATOR>
]	<DELIMITER>
=	<ARITHMETIC_OPERATOR>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
;	<DELIMITER>

----------Line 325
}	<DELIMITER>

----------Line 326

----------Line 327
if	<KEYWORD>
(	<DELIMITER>
!	<LOGICAL_OPERATOR>
(	<DELIMITER>
isalnum	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
)	<DELIMITER>
||	<LOGICAL_OPERATOR>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
'	<DELIMITER>
_	<CHARACTER>
'	<DELIMITER>
)	<DELIMITER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 328
break	<KEYWORD>
;	<DELIMITER>

----------Line 329
}	<DELIMITER>

----------Line 330

----------Line 331
backupChar	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
previous	<IDENTIFIER>
;	<DELIMITER>

----------Line 332

----------Line 333
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 334
}	<DELIMITER>
while	<KEYWORD>
(	<DELIMITER>
isCurrentNotEOFOrReadAndSetCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 335

----------Line 336
keyword	<IDENTIFIER>
[	<DELIMITER>
index	<IDENTIFIER>
]	<DELIMITER>
=	<ARITHMETIC_OPERATOR>
'	<DELIMITER>
\0	<CHARACTER>
'	<DELIMITER>
;	<DELIMITER>

----------Line 337

----------Line 338
if	<KEYWORD>
(	<DELIMITER>
index	<IDENTIFIER>
<	<RELATIONAL_OPERATOR>
9	<NUMBER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 339
for	<KEYWORD>
(	<DELIMITER>
i	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
0	<NUMBER>
;	<DELIMITER>
i	<IDENTIFIER>
<	<RELATIONAL_OPERATOR>
32	<NUMBER>
;	<DELIMITER>
i	<IDENTIFIER>
++	<ARITHMETIC_OPERATOR>
)	<DELIMITER>
{	<DELIMITER>

----------Line 340
if	<KEYWORD>
(	<DELIMITER>
strcmp	<IDENTIFIER>
(	<DELIMITER>
keywords	<IDENTIFIER>
[	<DELIMITER>
i	<IDENTIFIER>
]	<DELIMITER>
,	<DELIMITER>
keyword	<IDENTIFIER>
)	<DELIMITER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
0	<NUMBER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 341
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
previousType	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
KEYWORD	<IDENTIFIER>
;	<DELIMITER>

----------Line 342
isKeywork	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
1	<NUMBER>
;	<DELIMITER>

----------Line 343

----------Line 344
break	<KEYWORD>
;	<DELIMITER>

----------Line 345
}	<DELIMITER>

----------Line 346
}	<DELIMITER>

----------Line 347
}	<DELIMITER>

----------Line 348

----------Line 349
if	<KEYWORD>
(	<DELIMITER>
isKeywork	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
0	<NUMBER>
)	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
previousType	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
IDENTIFIER	<IDENTIFIER>
;	<DELIMITER>

----------Line 350

----------Line 351
reportPreviousType	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 352

----------Line 353
return	<KEYWORD>
backupChar	<IDENTIFIER>
;	<DELIMITER>

----------Line 354
}	<DELIMITER>

----------Line 355

----------Line 356
char	<KEYWORD>
readDigit	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 357
char	<KEYWORD>
backupChar	<IDENTIFIER>
;	<DELIMITER>

----------Line 358

----------Line 359
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 360
do	<KEYWORD>
{	<DELIMITER>

----------Line 361
swapChars	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 362
readAndSetNextChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 363

----------Line 364
if	<KEYWORD>
(	<DELIMITER>
!	<LOGICAL_OPERATOR>
(	<DELIMITER>
isalnum	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
)	<DELIMITER>
||	<LOGICAL_OPERATOR>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
'	<DELIMITER>
_	<CHARACTER>
'	<DELIMITER>
)	<DELIMITER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 365
break	<KEYWORD>
;	<DELIMITER>

----------Line 366
}	<DELIMITER>

----------Line 367

----------Line 368
backupChar	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
previous	<IDENTIFIER>
;	<DELIMITER>

----------Line 369
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 370
}	<DELIMITER>
while	<KEYWORD>
(	<DELIMITER>
isCurrentNotEOFOrReadAndSetCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 371

----------Line 372
setAndReportPreviousType	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
NUMBER	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 373

----------Line 374
return	<KEYWORD>
backupChar	<IDENTIFIER>
;	<DELIMITER>

----------Line 375
}	<DELIMITER>

----------Line 376

----------Line 377
int	<KEYWORD>
threeCharCheck	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
,	<DELIMITER>
char	<KEYWORD>
*array	<IDENTIFIER>
[	<DELIMITER>
]	<DELIMITER>
,	<DELIMITER>
int	<KEYWORD>
size	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 378
int	<KEYWORD>
i	<IDENTIFIER>
;	<DELIMITER>

----------Line 379
int	<KEYWORD>
temp	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
EOF	<IDENTIFIER>
;	<DELIMITER>

----------Line 380

----------Line 381
for	<KEYWORD>
(	<DELIMITER>
i	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
0	<NUMBER>
;	<DELIMITER>
i	<IDENTIFIER>
<	<RELATIONAL_OPERATOR>
size	<IDENTIFIER>
;	<DELIMITER>
i	<IDENTIFIER>
++	<ARITHMETIC_OPERATOR>
)	<DELIMITER>
{	<DELIMITER>

----------Line 382
if	<KEYWORD>
(	<DELIMITER>
strlen	<IDENTIFIER>
(	<DELIMITER>
array	<IDENTIFIER>
[	<DELIMITER>
i	<IDENTIFIER>
]	<DELIMITER>
)	<DELIMITER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
3	<NUMBER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 383
if	<KEYWORD>
(	<DELIMITER>
temp	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
EOF	<IDENTIFIER>
)	<DELIMITER>
temp	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
getChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 384
if	<KEYWORD>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
array	<IDENTIFIER>
[	<DELIMITER>
i	<IDENTIFIER>
]	<DELIMITER>
[	<DELIMITER>
0	<NUMBER>
]	<DELIMITER>
&&	<LOGICAL_OPERATOR>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
next	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
array	<IDENTIFIER>
[	<DELIMITER>
i	<IDENTIFIER>
]	<DELIMITER>
[	<DELIMITER>
1	<NUMBER>
]	<DELIMITER>
&&	<LOGICAL_OPERATOR>
temp	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
array	<IDENTIFIER>
[	<DELIMITER>
i	<IDENTIFIER>
]	<DELIMITER>
[	<DELIMITER>
2	<NUMBER>
]	<DELIMITER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 385
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 386
reportChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
next	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 387
// readAndSetNextChar(scanner);	<SINGLE_LINE_COMMENT>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
next	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
temp	<IDENTIFIER>
;	<DELIMITER>

----------Line 389
reportChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
next	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 390
readAndSetNextChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 391
return	<KEYWORD>
TRUE	<IDENTIFIER>
;	<DELIMITER>

----------Line 392
}	<DELIMITER>
else	<KEYWORD>
{	<DELIMITER>

----------Line 393

----------Line 394
}	<DELIMITER>

----------Line 395
}	<DELIMITER>

----------Line 396

----------Line 397
else	<KEYWORD>
if	<KEYWORD>
(	<DELIMITER>
strlen	<IDENTIFIER>
(	<DELIMITER>
array	<IDENTIFIER>
[	<DELIMITER>
i	<IDENTIFIER>
]	<DELIMITER>
)	<DELIMITER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
2	<NUMBER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 398
if	<KEYWORD>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
array	<IDENTIFIER>
[	<DELIMITER>
i	<IDENTIFIER>
]	<DELIMITER>
[	<DELIMITER>
0	<NUMBER>
]	<DELIMITER>
&&	<LOGICAL_OPERATOR>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
next	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
array	<IDENTIFIER>
[	<DELIMITER>
i	<IDENTIFIER>
]	<DELIMITER>
[	<DELIMITER>
1	<NUMBER>
]	<DELIMITER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 399
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 400
reportChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
next	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 401
readAndSetNextChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 402
return	<KEYWORD>
TRUE	<IDENTIFIER>
;	<DELIMITER>

----------Line 403
}	<DELIMITER>
else	<KEYWORD>
{	<DELIMITER>

----------Line 404

----------Line 405
}	<DELIMITER>

----------Line 406
}	<DELIMITER>

----------Line 407

----------Line 408
else	<KEYWORD>
{	<DELIMITER>

----------Line 409
if	<KEYWORD>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
array	<IDENTIFIER>
[	<DELIMITER>
i	<IDENTIFIER>
]	<DELIMITER>
[	<DELIMITER>
0	<NUMBER>
]	<DELIMITER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 410
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 411
return	<KEYWORD>
TRUE	<IDENTIFIER>
;	<DELIMITER>

----------Line 412
}	<DELIMITER>

----------Line 413
}	<DELIMITER>

----------Line 414
}	<DELIMITER>

----------Line 415

----------Line 416
if	<KEYWORD>
(	<DELIMITER>
temp	<IDENTIFIER>
!=	<RELATIONAL_OPERATOR>
EOF	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 417
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
characters	<IDENTIFIER>
--	<ARITHMETIC_OPERATOR>
;	<DELIMITER>

----------Line 418
ungetc	<IDENTIFIER>
(	<DELIMITER>
temp	<IDENTIFIER>
,	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
sfile	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 419
}	<DELIMITER>

----------Line 420

----------Line 421
return	<KEYWORD>
FALSE	<IDENTIFIER>
;	<DELIMITER>

----------Line 422
}	<DELIMITER>

----------Line 423

----------Line 424
int	<KEYWORD>
twoCharCheck	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
,	<DELIMITER>
char	<KEYWORD>
*array	<IDENTIFIER>
[	<DELIMITER>
]	<DELIMITER>
,	<DELIMITER>
int	<KEYWORD>
size	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 425
int	<KEYWORD>
i	<IDENTIFIER>
;	<DELIMITER>

----------Line 426

----------Line 427
for	<KEYWORD>
(	<DELIMITER>
i	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
0	<NUMBER>
;	<DELIMITER>
i	<IDENTIFIER>
<	<RELATIONAL_OPERATOR>
size	<IDENTIFIER>
;	<DELIMITER>
i	<IDENTIFIER>
++	<ARITHMETIC_OPERATOR>
)	<DELIMITER>
{	<DELIMITER>

----------Line 428
if	<KEYWORD>
(	<DELIMITER>
strlen	<IDENTIFIER>
(	<DELIMITER>
array	<IDENTIFIER>
[	<DELIMITER>
i	<IDENTIFIER>
]	<DELIMITER>
)	<DELIMITER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
2	<NUMBER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 429
if	<KEYWORD>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
array	<IDENTIFIER>
[	<DELIMITER>
i	<IDENTIFIER>
]	<DELIMITER>
[	<DELIMITER>
0	<NUMBER>
]	<DELIMITER>
&&	<LOGICAL_OPERATOR>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
next	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
array	<IDENTIFIER>
[	<DELIMITER>
i	<IDENTIFIER>
]	<DELIMITER>
[	<DELIMITER>
1	<NUMBER>
]	<DELIMITER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 430
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 431
reportChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
next	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 432
readAndSetNextChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 433
return	<KEYWORD>
TRUE	<IDENTIFIER>
;	<DELIMITER>

----------Line 434
}	<DELIMITER>
else	<KEYWORD>
{	<DELIMITER>

----------Line 435

----------Line 436
}	<DELIMITER>

----------Line 437
}	<DELIMITER>

----------Line 438

----------Line 439
else	<KEYWORD>
{	<DELIMITER>

----------Line 440
if	<KEYWORD>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
array	<IDENTIFIER>
[	<DELIMITER>
i	<IDENTIFIER>
]	<DELIMITER>
[	<DELIMITER>
0	<NUMBER>
]	<DELIMITER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 441
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 442
return	<KEYWORD>
TRUE	<IDENTIFIER>
;	<DELIMITER>

----------Line 443
}	<DELIMITER>

----------Line 444
}	<DELIMITER>

----------Line 445
}	<DELIMITER>

----------Line 446

----------Line 447
return	<KEYWORD>
FALSE	<IDENTIFIER>
;	<DELIMITER>

----------Line 448
}	<DELIMITER>

----------Line 449

----------Line 450
int	<KEYWORD>
isMemberPointerOperator	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 451
return	<KEYWORD>
twoCharCheck	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
memberPointerOperators	<IDENTIFIER>
,	<DELIMITER>
4	<NUMBER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 452
}	<DELIMITER>

----------Line 453

----------Line 454
int	<KEYWORD>
isArithmeticOperator	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 455
return	<KEYWORD>
twoCharCheck	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
arithmeticOperators	<IDENTIFIER>
,	<DELIMITER>
13	<NUMBER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 456
}	<DELIMITER>

----------Line 457

----------Line 458
int	<KEYWORD>
isRelationalOperator	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 459
return	<KEYWORD>
twoCharCheck	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
relationalOperators	<IDENTIFIER>
,	<DELIMITER>
6	<NUMBER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 460
}	<DELIMITER>

----------Line 461

----------Line 462
int	<KEYWORD>
isLogicalOperator	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 463
return	<KEYWORD>
twoCharCheck	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
logicalOperators	<IDENTIFIER>
,	<DELIMITER>
3	<NUMBER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 464
}	<DELIMITER>

----------Line 465

----------Line 466
int	<KEYWORD>
isBitwiseOperator	<IDENTIFIER>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 467
return	<KEYWORD>
threeCharCheck	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
bitwiseOperators	<IDENTIFIER>
,	<DELIMITER>
11	<NUMBER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 468
}	<DELIMITER>

----------Line 469

----------Line 470
int	<KEYWORD>
main	<IDENTIFIER>
(	<DELIMITER>
int	<KEYWORD>
argc	<IDENTIFIER>
,	<DELIMITER>
char	<KEYWORD>
*argv	<IDENTIFIER>
[	<DELIMITER>
]	<DELIMITER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 471
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
scanner	<IDENTIFIER>
;	<DELIMITER>

----------Line 472
char	<KEYWORD>
temp	<IDENTIFIER>
;	<DELIMITER>

----------Line 473
scanner	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
(	<DELIMITER>
Scanner	<IDENTIFIER>
*	<MEMBER_POINTER_OPERATOR>
)	<DELIMITER>
calloc	<IDENTIFIER>
(	<DELIMITER>
sizeof	<KEYWORD>
(	<DELIMITER>
Scanner	<IDENTIFIER>
)	<DELIMITER>
,	<DELIMITER>
1	<NUMBER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 474

----------Line 475
if	<KEYWORD>
(	<DELIMITER>
argc	<IDENTIFIER>
!=	<RELATIONAL_OPERATOR>
3	<NUMBER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 476
perror	<IDENTIFIER>
(	<DELIMITER>
"	<DELIMITER>
Invalid arguments	<STRING>
"	<DELIMITER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 477
exit	<IDENTIFIER>
(	<DELIMITER>
1	<NUMBER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 478
}	<DELIMITER>

----------Line 479

----------Line 480
initScanner	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
argv	<IDENTIFIER>
[	<DELIMITER>
1	<NUMBER>
]	<DELIMITER>
,	<DELIMITER>
argv	<IDENTIFIER>
[	<DELIMITER>
2	<NUMBER>
]	<DELIMITER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 481
startNewLine	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 482

----------Line 483
while	<KEYWORD>
(	<DELIMITER>
!	<LOGICAL_OPERATOR>
isCurrentEOF	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
||	<LOGICAL_OPERATOR>
(	<DELIMITER>
readAndSetCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
)	<DELIMITER>
!	<LOGICAL_OPERATOR>
=	<ARITHMETIC_OPERATOR>
EOF	<IDENTIFIER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 484
readAndSetNextChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 485

----------Line 486
if	<KEYWORD>
(	<DELIMITER>
isDoubleQuote	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
previous	<IDENTIFIER>
,	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
)	<DELIMITER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 487
readString	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 488
}	<DELIMITER>

----------Line 489

----------Line 490
else	<KEYWORD>
if	<KEYWORD>
(	<DELIMITER>
isSingleQuote	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
previous	<IDENTIFIER>
,	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
)	<DELIMITER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 491
readChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 492
}	<DELIMITER>

----------Line 493

----------Line 494
else	<KEYWORD>
if	<KEYWORD>
(	<DELIMITER>
isSingleLineComment	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
,	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
next	<IDENTIFIER>
)	<DELIMITER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 495
stripSingleLineComment	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 496
}	<DELIMITER>

----------Line 497

----------Line 498
else	<KEYWORD>
if	<KEYWORD>
(	<DELIMITER>
isMultiLineComment	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
,	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
next	<IDENTIFIER>
)	<DELIMITER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 499
stripMultiLineComment	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 500
}	<DELIMITER>

----------Line 501

----------Line 502
else	<KEYWORD>
if	<KEYWORD>
(	<DELIMITER>
isHash	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
)	<DELIMITER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 503
temp	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
readPreProcessor	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 504
restoreChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
temp	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 505
}	<DELIMITER>

----------Line 506

----------Line 507
else	<KEYWORD>
if	<KEYWORD>
(	<DELIMITER>
isalpha	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
)	<DELIMITER>
||	<LOGICAL_OPERATOR>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
'	<DELIMITER>
_	<CHARACTER>
'	<DELIMITER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 508
temp	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
readKeywordIdentifier	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 509
restoreChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
temp	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 510
}	<DELIMITER>

----------Line 511

----------Line 512
else	<KEYWORD>
if	<KEYWORD>
(	<DELIMITER>
isdigit	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
)	<DELIMITER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 513
temp	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
readDigit	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 514
restoreChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
temp	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 515
}	<DELIMITER>

----------Line 516

----------Line 517
else	<KEYWORD>
if	<KEYWORD>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
previousType	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
IDENTIFIER	<IDENTIFIER>
&	<MEMBER_POINTER_OPERATOR>
&isMemberPointerOperator	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 518
setAndReportPreviousType	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
MEMBER_POINTER_OPERATOR	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 519
}	<DELIMITER>

----------Line 520

----------Line 521
else	<KEYWORD>
if	<KEYWORD>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
previousType	<IDENTIFIER>
!=	<RELATIONAL_OPERATOR>
KEYWORD	<IDENTIFIER>
&	<MEMBER_POINTER_OPERATOR>
&isArithmeticOperator	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 522
setAndReportPreviousType	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
ARITHMETIC_OPERATOR	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 523
}	<DELIMITER>

----------Line 524

----------Line 525
else	<KEYWORD>
if	<KEYWORD>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
previousType	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
IDENTIFIER	<IDENTIFIER>
&	<MEMBER_POINTER_OPERATOR>
&isBitwiseOperator	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 526
setAndReportPreviousType	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
BITWISE_OPERATOR	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 527
}	<DELIMITER>

----------Line 528

----------Line 529
else	<KEYWORD>
if	<KEYWORD>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
previousType	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
=	<ARITHMETIC_OPERATOR>
IDENTIFIER	<IDENTIFIER>
&	<MEMBER_POINTER_OPERATOR>
&isRelationalOperator	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 530
setAndReportPreviousType	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
RELATIONAL_OPERATOR	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 531
}	<DELIMITER>

----------Line 532

----------Line 533
else	<KEYWORD>
if	<KEYWORD>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
previousType	<IDENTIFIER>
!=	<RELATIONAL_OPERATOR>
KEYWORD	<IDENTIFIER>
&	<MEMBER_POINTER_OPERATOR>
&isLogicalOperator	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 534
setAndReportPreviousType	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
,	<DELIMITER>
LOGICAL_OPERATOR	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 535
}	<DELIMITER>

----------Line 536

----------Line 537
else	<KEYWORD>
if	<KEYWORD>
(	<DELIMITER>
isDelimiter	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
)	<DELIMITER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 538
reportCurrentChar	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 539
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
previousType	<IDENTIFIER>
=	<ARITHMETIC_OPERATOR>
DELIMITER	<IDENTIFIER>
;	<DELIMITER>

----------Line 540

----------Line 541
reportPreviousType	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 542
}	<DELIMITER>

----------Line 543

----------Line 544
else	<KEYWORD>
if	<KEYWORD>
(	<DELIMITER>
isNewLine	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
)	<DELIMITER>
)	<DELIMITER>
{	<DELIMITER>

----------Line 545
incrementAndReportNewLine	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 546
// scanner->previousType = WHITE_SPACE;	<SINGLE_LINE_COMMENT>
}	<DELIMITER>

----------Line 548

----------Line 549
else	<KEYWORD>
{	<DELIMITER>

----------Line 550
if	<KEYWORD>
(	<DELIMITER>
!	<LOGICAL_OPERATOR>
isspace	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
)	<DELIMITER>
)	<DELIMITER>
fprintf	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
dfile	<IDENTIFIER>
,	<DELIMITER>
"	<DELIMITER>
%c	<STRING>
"	<DELIMITER>
,	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
current	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 551
// scanner->previousType = WHITE_SPACE;	<SINGLE_LINE_COMMENT>
}	<DELIMITER>

----------Line 553

----------Line 554
swapChars	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 555
}	<DELIMITER>

----------Line 556

----------Line 557
printf	<IDENTIFIER>
(	<DELIMITER>
"	<DELIMITER>
Total characters: %d\n	<STRING>
"	<DELIMITER>
,	<DELIMITER>
scanner	<IDENTIFIER>
->	<MEMBER_POINTER_OPERATOR>
characters	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 558

----------Line 559
reportNewLine	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 560
closeScanner	<IDENTIFIER>
(	<DELIMITER>
scanner	<IDENTIFIER>
)	<DELIMITER>
;	<DELIMITER>

----------Line 561

----------Line 562
return	<KEYWORD>
0	<NUMBER>
;	<DELIMITER>

----------Line 563
}	<DELIMITER>

